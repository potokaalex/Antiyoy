типы данных:
static - не изменяются в процессе игры, существуют всё время жизни проекта.
progress - изменяются в процессе игры и могут быть сохранены

загрузка проекта:
ProjectInstaller -- BootstrapInstaller -> Bootstrap -> ProjectLoadState -> mainMenuInstaller -- buttonsOnScene

staticDataProvider должен быть инициализирован из projectLoadData в ProjectLoadState
1) может быть я могу запихнуть нужные мне данные сразу в staticDataProvider чтобы не заниматься этой инициализацией?
    здравая мысль, но что если эти данные придётся распарсить (загрузить из ресурсов, например) ?
2) можно отправить эти данные в progressDataProvider достать их в стейте, распарсить и удалить
    здравая мысль
3) можно отправить эти данные в staticDataProvider достать их в стейте и распарсить
    плохая мысль, т.к. данные изменяются (нет!) т.к. эти данные нельзя удалить (а зачем?) т.к. ход этих данных не очевиден (в смысле?)
    т.к. это временные данные (а кто сказал что staticData это данные которые существуют всё время проекта?)

типы данных по времени жизни:
    вечные (существуют в контексте сцены или какого-то события)
    бесконечные (существуют всё время жизни проекта)
   
чтобы не заморачиваться с очисткой progressData нужно ввести ProjectProgressData (эт глобальный прогресс, нужен для перебрасывания данных между сценами)
и SceneProgressData

а как я буду загружать карты ? (а мне нужно загружать две одинаковые карты?) - нет, только одну, текущую.

может не обобщать static data provider, а писать конкретные данные которые он получает и отдаёт.
    плюсы: возможность полностью контролировать загрузку всех данных. (?) нет потребности помнить какие статические данные вообще существуют.
    минусы: сложнее добавлять новые статические данные. (их вообще не много) провайдер данных будет сам загружать данные. (?)
    итог: не использую обобщения в static data provider`е т.к. там будет не много данных и я хочу писать более очевидный, понятный код. 